// *************** TIMES SERIES OF BURNED AREA IN THE PANTANAL FROM MCD64A1.006 IMAGES ****************


// ################################### MONTHLY DATA ##########################################



// -------------------------------------------------------------------------------------------------

// ** PLAN **
  // 0 - IMPORTS
  // 1 - CREATE MONTHLY BURNED_AREA COLLECTION
  // 2 - VISUALIZE THE MONTHLY DATA

// -------------------------------------------------------------------------------------------------



/* 0 - IMPORTS */

      // Image Collection
      var imageCollection = ee.ImageCollection("MODIS/006/MCD64A1");
      
      // Study Area
      var pantanal = table
            .geometry();
        
      // Area of the Pantanal
      var areaP = pantanal.area().divide(1000000);
      print('Pantanal area', areaP);
      
      // Projection
      var projection = imageCollection.first().projection();
      
      // Scale
      var scale = imageCollection.first().projection().nominalScale();

/* 1 - CREATE MONTHLY BURNED_AREA COLLECTION */

  // Create a function that turns 'MODIS Monthly Burned Area Product' image collection into a collection
  // of area-images wherein each 'burned' pixel is attributed a value equals to the area of lands it covers
    /** STEP 1: Add a classification band to the image collection **/
        /*** this classifcation band attributes 
              1 to burned area ('BurnDate': 1)
              0 to unburned areas ('BurnDate': 0),
                to unmapped areas ('BurnDate': -1),
                and to water areas ('BurnDate': -2).
                ***/
      // Create a function that add a classification band
      function add_ClassificationBand (input) {
        var band = input.select('BurnDate')
        .where(input.select('BurnDate').gt(0), 1)
        .where(input.select('BurnDate').lte(0), 0)
        .rename('Classification');
        return input.addBands(band);
      }
      // Add the band to the entire collection
      var Classified_Collection = imageCollection.map(add_ClassificationBand);
      print('CC', Classified_Collection);
    
    /** STEP 2: Transform the classified image collection into area-image collection **/
      // Create a function that takes a 'classified' image and returns the area image
      function GetAreaImage (image){
        return image.multiply(ee.Image.pixelArea()
        .reproject({
          crs: projection, 
          scale: scale})
        .divide(1e6))
        .select('Classification').rename('burned_area')
        .copyProperties(image, image.propertyNames()); // try to copy only 'system:time_start'
      }
      // Apply the function to the entire 'classified' dataset
      var BurnedArea_dataset = Classified_Collection.map(GetAreaImage);
      print('BurnedArea_dataset', BurnedArea_dataset);

/* 2 - VISUALIZE THE MONTHLY DATA */
    
    // Create a function that takes an area-image and returns the total burned area in this image and the 
    // correponding month as a feature 
    function MonthBurnedArea (image) {
      var date = image.get('system:time_start');
      var area = image.reduceRegion({
        reducer: ee.Reducer.sum(),
        geometry: pantanal,
        scale: scale
      });
      var feature = ee.Feature(null, {'system:index': image.get('system:index'),
                                'Date': ee.Date(date).format('Y/M/d'),
                                'Burned_Area': area.getNumber('burned_area')
      });
      return feature;
    }
    
    // Apply the function to the dataset
    var BA = BurnedArea_dataset.map(MonthBurnedArea);
    print('BA', BA);
    
    // Create a graph of the time-series
    var graph = ui.Chart.feature.byFeature(BA, 'Date', 'Burned_Area');
    
    print(graph.setChartType("ColumnChart")
              .setOptions({vAxis: {title: 'Burned Area [kmÂ²]'},
                            hAxis: {title: 'Date'}}));
    
    // // Export the time-series as a csv.
    Export.table.toDrive({
      collection: BA,
      selectors: 'date, value'
    });
    



/////////////////////////////////////////////////////////////////////////////////////////////////////////




// #################################### ANNUAL DATA ####################################




// -------------------------------------------------------------------------------------------------

// ** PLAN **
  // 0 - IMPORTS
  // 1 - ADD A CLASSIFICATION BAND
  // 2 - CREATE ANNUAL COMPOSITES OF THE MCD64A1.006 BA PRODUCT
  // 3 - ADD AN AREA-BAND TO THE COLLECTION
  // 4 - VISUALIZE THE DATA

// -------------------------------------------------------------------------------------------------


/* 0 - IMPORTS */

      // Image Collection
      var imageCollection = ee.ImageCollection("MODIS/006/MCD64A1");
      
      // Study Area
      var pantanal = ee.FeatureCollection('users/antoinemorchain/Pantanal_Padovani_limite')
            .geometry();
        
      // Area of the Pantanal
      var areaP = pantanal.area().divide(1000000);
      print('Pantanal area', areaP);
      
      // Projection
      var projection = imageCollection.first().projection();
      
      // Scale
      var scale = imageCollection.first().projection().nominalScale();



/* 1 - ADD A CLASSIFICATION BAND */

    /* this classifcation band attributes 
          - 1 to burned areas ('BurnDate': 1)
          - a mask to the remaining
            */
        
    // Create a function that adds a classification band
    function add_ClassificationBand (input) {
      var band = input.select('BurnDate')
      .updateMask(input.select('BurnDate').gt(0))
      .where(input.select('BurnDate').gt(0), 1)
      .rename('Classification');
      return input.addBands(band);
    }
    
    // Add the band to the entire collection
    var Classified_Collection = imageCollection.map(add_ClassificationBand);
      print('CC', Classified_Collection);


  
/* 2 - CREATE ANNUAL COMPOSITES OF THE MCD64A1.006 BA PRODUCT */

        // This avoids potential double-counting of a burned scar during the same year
        var image2001 = Classified_Collection.select('Classification').filterDate('2001-01-01', '2001-12-31').mosaic();
        var image2002 = Classified_Collection.select('Classification').filterDate('2002-01-01', '2002-12-31').mosaic();
        var image2003 = Classified_Collection.select('Classification').filterDate('2003-01-01', '2003-12-31').mosaic();
        var image2004 = Classified_Collection.select('Classification').filterDate('2004-01-01', '2004-12-31').mosaic();
        var image2005 = Classified_Collection.select('Classification').filterDate('2005-01-01', '2005-12-31').mosaic();
        var image2006 = Classified_Collection.select('Classification').filterDate('2006-01-01', '2006-12-31').mosaic();
        var image2007 = Classified_Collection.select('Classification').filterDate('2007-01-01', '2007-12-31').mosaic();
        var image2008 = Classified_Collection.select('Classification').filterDate('2008-01-01', '2008-12-31').mosaic();
        var image2009 = Classified_Collection.select('Classification').filterDate('2009-01-01', '2009-12-31').mosaic();
        var image2010 = Classified_Collection.select('Classification').filterDate('2010-01-01', '2010-12-31').mosaic();
        var image2011 = Classified_Collection.select('Classification').filterDate('2011-01-01', '2011-12-31').mosaic();
        var image2012 = Classified_Collection.select('Classification').filterDate('2012-01-01', '2012-12-31').mosaic();
        var image2013 = Classified_Collection.select('Classification').filterDate('2013-01-01', '2013-12-31').mosaic();
        var image2014 = Classified_Collection.select('Classification').filterDate('2014-01-01', '2014-12-31').mosaic();
        var image2015 = Classified_Collection.select('Classification').filterDate('2015-01-01', '2015-12-31').mosaic();
        var image2016 = Classified_Collection.select('Classification').filterDate('2016-01-01', '2016-12-31').mosaic();
        var image2017 = Classified_Collection.select('Classification').filterDate('2017-01-01', '2017-12-31').mosaic();
        var image2018 = Classified_Collection.select('Classification').filterDate('2018-01-01', '2018-12-31').mosaic();
        var image2019 = Classified_Collection.select('Classification').filterDate('2019-01-01', '2019-12-31').mosaic();
        var image2020 = Classified_Collection.select('Classification').filterDate('2020-01-01', '2020-12-31').mosaic();
        
        var ImageList = [image2001,
                        image2002,
                        image2003,
                        image2004,
                        image2005,
                        image2006,
                        image2007,
                        image2008,
                        image2009,
                        image2010,
                        image2011,
                        image2012,
                        image2013,
                        image2014,
                        image2015,
                        image2016,
                        image2017,
                        image2018,
                        image2019,
                        image2020];
                        
        var MCD64A1_annualcomposites = ee.ImageCollection(ImageList)
              .map(function (x) {
                return x.reproject({
                    crs: projection, 
                    scale: scale
                });
              });
            // reprojection after mosaic()
        print('Annual Composites - Collection', MCD64A1_annualcomposites);



/* 3 - ADD AN AREA-BAND TO THE COLLECTION */

    // Create the Area-Band
    function addAreaBand (input) {
      var AreaImage = ee.Image.pixelArea()
            .reproject({
              crs: projection, 
              scale: scale
            })
            .divide(1e6)
            .rename('Area')
            .copyProperties(imageCollection.first(), imageCollection.first().propertyNames());
        // // Test Area Band
        // var MIN = aggregate.select('Area').reduceRegion({reducer: ee.Reducer.min(), scale: scale}).get('Area')
        // var MAX = aggregate.select('Area').reduceRegion({reducer: ee.Reducer.max(), scale: scale}).get('Area')
        // print(MIN)
        // print(MAX)
      var Band = input.multiply(AreaImage)
            .reproject({
              crs: projection, 
              scale: scale})
            .select('Classification').rename('Burned_Area')
            .copyProperties(input, input.propertyNames());
      return input.addBands(Band);
    }
    
    // Apply the function to the entire 'classified' dataset
    var annualcomposites_withArea = MCD64A1_annualcomposites.map(addAreaBand);
    print('annualcomposites_withArea', annualcomposites_withArea);



/* 4 - VISUALIZE THE DATA */
  
    /** Create feature to be used for the graph **/
      
      // properties have been lost with the 'mosaicing'
      // -> need to create a list and artificially associate a date to each image
    var CollectiontoList = annualcomposites_withArea.toList(21);
    var size = ee.Number(annualcomposites_withArea.size());
    var list = ee.List.sequence(0, ee.Number(size.subtract(1)));
    
    function getYearBurnedArea (input) {
      var year = ee.Number(input).add(2001);
      var image = CollectiontoList.get(ee.Number(input));
      var area = ee.Image(image)
            .reduceRegion({
              reducer: ee.Reducer.sum(),
              geometry: pantanal,
              crs: projection,
              scale: scale
            });
      var feature = ee.Feature(null, {
                                'Date': ee.Date.fromYMD(year, 1, 1),
                                'Annual_Burned_Area': area.getNumber('Burned_Area')
      });
      return feature;
    }
    
    var AnnualBurnedArea = ee.FeatureCollection(list.map(getYearBurnedArea));
    print('AnnualBurnedArea', AnnualBurnedArea);
  
    
    // Add deviation from mean to the collection
    var MeanAnnualBurnedArea = AnnualBurnedArea.aggregate_mean('Annual_Burned_Area');
    print('MeanAnnualBurnedArea', MeanAnnualBurnedArea);
    
    function addDeviation (input) {
      var deviation = 
              input.getNumber('Annual_Burned_Area')
              .subtract(MeanAnnualBurnedArea)
              .divide(MeanAnnualBurnedArea);
      var feature = ee.Feature(null, {
                                  'Date': input.get('Date'),
                                  'Annual_Burned_Area': input.get('Annual_Burned_Area'),
                                  'Deviation_from_Mean': deviation
      });
      return feature;
    }

    var BurnedArea_TimeSeries = AnnualBurnedArea.map(addDeviation);
    print('BurnedArea_TimeSeries', BurnedArea_TimeSeries);

    /** Create a graph of the time-series **/
    var graph = ui.Chart.feature.byFeature(
          AnnualBurnedArea, 
          'Date', 
          'Annual_Burned_Area'
        );
    var graph2 = ui.Chart.feature.byFeature(
          BurnedArea_TimeSeries,
          'Date',
          ['Annual_Burned_Area', 'Deviation_from_Mean']
        );
    
    print(graph.setChartType("LineChart")
              .setOptions({vAxis: {title: 'Burned Area [kmÂ²]'},
                            hAxis: {title: 'Date'}}));
    print(graph2.setChartType("LineChart"));
          // .setOptions({vAxis: {title: 'Burned Area [kmÂ²]'},
          //               hAxis: {title: 'Date'}}));

// Export.table.toDrive({
//   collection: BurnedArea_TimeSeries,
//   description: 'BurnedArea_TimeSeries',
//   folder: 'BCM2020-2021/Dissertation',
//   fileNamePrefix : 'BurnedArea_TimeSeries'
// });
