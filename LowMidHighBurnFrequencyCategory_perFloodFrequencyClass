

// ************************* DISTRIBUTION OF FIRE FREQUENCY CLASSES WITHIN EACH FLOOD FREQUENCY CLASS **************************

// Circumvents potential bias due to difference in total area of each class

// -------------------------------------------------------------------------------------------------

/*** PLAN ***/
  // 0 - IMPORTS
  // 1 - CREATE AGGREGATE IMAGE GIVING THE NUMBER OF FLOOD EVENTS FOR EACH PIXEL
  // 2 - CREATE AGGREGATE IMAGE GIVING THE NUMBER OF FIRE EVENTS FOR EACH PIXEL
  // 3 - COMBINE BOTH AGGREGATES AS BANDS OF A SINGLE IMAGE AND ADD AN AREA-BAND
  // 4 - CREATE A FEATURE COLLECTION COMPARING THE OCCURRENCE 3 FIRE FRQCY CATEGORIES (LOW, MID, HIGH) FOR EACH FLOOD CATEGORY
  // 5 - VISUALIZE THE RESULTS

// -------------------------------------------------------------------------------------------------  
  
  
/* 0- IMPORTS */

  // Study Area
  var pantanal = table.geometry();
  
  // Area of the Pantanal
  var areaP = pantanal.area().divide(1000000);
  print('Pantanal area', areaP);
  
  // Image Collections
  var MODIScollection = imageCollection;
  var PEREIRAcollection = imageCollection2;
  var collection = imageCollection3;
  print('Inundation maps Collection', PEREIRAcollection);
  
  // MODIS projection
  var projection = MODIScollection.first().projection();
  
  // MODIS scale
  var scale = MODIScollection.first().projection().nominalScale();



/* 1 - CREATE AGGREGATE IMAGE GIVING THE NUMBER OF FLOOD EVENTS FOR EACH PIXEL */

    // Create an aggregate image that gives each pixel the value of the number of flood events over the time-period OI **/
 
        var aggregate_withoutArea = PEREIRAcollection.select('Classification')
              .map(function (x) {return x.unmask(0)})
              .sum()
              .reproject({
                  crs: projection, 
                  scale: scale
              })
              .select('Classification').rename('Floods_Classification')
              .clip(pantanal);



/* 2 - CREATE AGGREGATE IMAGE GIVING THE NUMBER OF FIRE EVENTS FOR EACH PIXEL */


  /** Add a classification band to the image collection **/

        // Create a function that adds a classification band
        function add_ClassificationBand (input) {
          var band = input.select('BurnDate')
          .updateMask(input.select('BurnDate').gt(0))
          .where(input.select('BurnDate').gt(0), 1)
          .rename('Classification');
          return input.addBands(band);
        }
        
        // Add the band to the entire collection
        var Classified_Collection = MODIScollection.map(add_ClassificationBand);
          print('CC', Classified_Collection);
  
  /** Create an Image Collection with annual composites of the MCD64A1.006 BA product **/
        // This avoids potential double-counting of the same fire scars during the same year
        var image2001 = Classified_Collection.select('Classification').filterDate('2001-01-01', '2001-12-31').mosaic();
        var image2002 = Classified_Collection.select('Classification').filterDate('2002-01-01', '2002-12-31').mosaic();
        var image2003 = Classified_Collection.select('Classification').filterDate('2003-01-01', '2003-12-31').mosaic();
        var image2004 = Classified_Collection.select('Classification').filterDate('2004-01-01', '2004-12-31').mosaic();
        var image2005 = Classified_Collection.select('Classification').filterDate('2005-01-01', '2005-12-31').mosaic();
        var image2006 = Classified_Collection.select('Classification').filterDate('2006-01-01', '2006-12-31').mosaic();
        var image2007 = Classified_Collection.select('Classification').filterDate('2007-01-01', '2007-12-31').mosaic();
        var image2008 = Classified_Collection.select('Classification').filterDate('2008-01-01', '2008-12-31').mosaic();
        var image2009 = Classified_Collection.select('Classification').filterDate('2009-01-01', '2009-12-31').mosaic();
        var image2010 = Classified_Collection.select('Classification').filterDate('2010-01-01', '2010-12-31').mosaic();
        var image2011 = Classified_Collection.select('Classification').filterDate('2011-01-01', '2011-12-31').mosaic();
        var image2012 = Classified_Collection.select('Classification').filterDate('2012-01-01', '2012-12-31').mosaic();
        var image2013 = Classified_Collection.select('Classification').filterDate('2013-01-01', '2013-12-31').mosaic();
        var image2014 = Classified_Collection.select('Classification').filterDate('2014-01-01', '2014-12-31').mosaic();
        var image2015 = Classified_Collection.select('Classification').filterDate('2015-01-01', '2015-12-31').mosaic();
        var image2016 = Classified_Collection.select('Classification').filterDate('2016-01-01', '2016-12-31').mosaic();
        var image2017 = Classified_Collection.select('Classification').filterDate('2017-01-01', '2017-12-31').mosaic();
        var image2018 = Classified_Collection.select('Classification').filterDate('2018-01-01', '2018-12-31').mosaic();
        var image2019 = Classified_Collection.select('Classification').filterDate('2019-01-01', '2019-12-31').mosaic();
        var image2020 = Classified_Collection.select('Classification').filterDate('2020-01-01', '2020-12-31').mosaic();
        
        var ImageList = [image2001,
                        image2002,
                        image2003,
                        image2004,
                        image2005,
                        image2006,
                        image2007,
                        image2008,
                        image2009,
                        image2010,
                        image2011,
                        image2012,
                        image2013,
                        image2014,
                        image2015,
                        image2016,
                        image2017,
                        image2018,
                        image2019,
                        image2020];
                        
        var MCD64A1_annualcomposites = ee.ImageCollection(ImageList)
              .map(function (x) {
                return x.reproject({
                  crs: projection,
                  scale: scale
                });
              });
        print('Annual Composites - Collection', MCD64A1_annualcomposites);

 
  /** Create an aggregate image that gives each pixel the value of the number of burn events over the time-period OI **/
 
        var FireClassificationAggregate = MCD64A1_annualcomposites.map(function (x) {return x.unmask(0)})
              .sum().clip(pantanal)
              .reproject({
                crs: projection, 
                scale: scale
              })
              .select('Classification').rename('Fires_Classification');


  
/* 3 - COMBINE BOTH AGGREGATES AS BANDS OF A SINGLE IMAGE AND ADD AN AREA-BAND */

      // Add the fire aggregate image as a band to the flood aggregate **/
        var combined_aggregate = aggregate_withoutArea
                .addBands(FireClassificationAggregate);
        print('combined_aggregate', combined_aggregate);

      // Create the Area-Band
      var AreaBand = ee.Image.pixelArea()
                      .reproject({
                        crs: projection, 
                        scale: scale
                      })
                      .divide(1e6)
                      .rename('Area')
                      .copyProperties(aggregate_withoutArea, aggregate_withoutArea.propertyNames());
          // // Test Area Band
          // var MIN = aggregate.select('Area').reduceRegion({reducer: ee.Reducer.min(), scale: scale}).get('Area')
          // var MAX = aggregate.select('Area').reduceRegion({reducer: ee.Reducer.max(), scale: scale}).get('Area')
          // print(MIN)
          // print(MAX)
      
      // Add the Area-Band to the aggregate
      var aggregate = combined_aggregate.addBands(AreaBand);
      print('aggregate', aggregate);



/* 4 - CREATE A FEATURE COLLECTION GIVING THE PROPORTION OF 3 FIRE FRQCY CATEGORIES (LOW, MID, HIGH) FOR EACH FLOOD CATEGORY */

  /** Create a list of all the flood frequencies categories **/
      
        // Get min value
        var min = aggregate.select('Floods_Classification').reduceRegion({
          reducer: ee.Reducer.min(),
          geometry: pantanal,
          crs: projection
        })
              .get('Floods_Classification'); //print('min', min);
        
        // Get max value
        var max = aggregate.select('Floods_Classification').reduceRegion({
          reducer: ee.Reducer.max(),
          geometry: pantanal,
          crs: projection
        })
              .get('Floods_Classification'); //print('max', max);
        
        // Create the list of categories from min and max value
        var listofclasses = ee.List.sequence(min, max);
        print('List of flood frequency categories', listofclasses);

  /** Create a function **/ 
  /** that takes a class and returns a feature giving 
            - the name of the class
            - for each flood category, the percentage of the area with 
                low fire frequency
                mid fire frequency
                high fire frequency
            **/
  
      /*** Create the function ***/
      function giveClassFireFrequency (x) {
        var classOI = aggregate.updateMask(
          aggregate.select('Floods_Classification').eq(ee.Number(x))
          ); 
        var TotalFireFrequency = classOI
                  .select('Area')
                  .reduceRegion({
                    reducer: ee.Reducer.sum(),
                    crs: projection,
                    scale: scale,
                    geometry: pantanal
                  })
                  .get('Area');
        var LowFireFrequency = classOI
                  .updateMask(classOI.select('Fires_Classification').lt(2))
                  .select('Area')
                  .reduceRegion({
                    reducer: ee.Reducer.sum(),
                    crs: projection,
                    scale: scale,
                    geometry: pantanal
                  })
                  .get('Area');
        var MidFireFrequency = classOI
                  .updateMask(classOI.select('Fires_Classification').eq(2)
                      .or(classOI.select('Fires_Classification').eq(3))
                      .or(classOI.select('Fires_Classification').eq(4))
                      .or(classOI.select('Fires_Classification').eq(5)))
                  .select('Area')
                  .reduceRegion({
                    reducer: ee.Reducer.sum(),
                    crs: projection,
                    scale: scale,
                    geometry: pantanal
                  })
                  .get('Area');
        var HighFireFrequency = classOI
                  .updateMask(classOI.select('Fires_Classification').gt(5))
                  .select('Area')
                  .reduceRegion({
                    reducer: ee.Reducer.sum(),
                    crs: projection,
                    scale: scale,
                    geometry: pantanal
                  })
                  .get('Area');
        var feature = ee.Feature(null, {'Class': x,
                                          'Fire_Frequency_Low': ee.Number(LowFireFrequency)
                                                                .multiply(100)
                                                                .divide(TotalFireFrequency),
                                          // 'Standard Deviation (low)': StandardDeviation_Low,
                                          'Fire_Frequency_Mid': ee.Number(MidFireFrequency)
                                                                .multiply(100)
                                                                .divide(TotalFireFrequency),
                                          // 'Standard Deviation (Mid)': StandardDeviation_Med,
                                          'Fire_Frequency_High': ee.Number(HighFireFrequency)
                                                                .multiply(100)
                                                                .divide(TotalFireFrequency),
                                          // 'Standard Deviation (High)': StandardDeviation_High
        });
        return feature;
      }
      
      /*** Apply the function to the list ***/
      var LowMidHighFireFrequency_PerClass = ee.FeatureCollection(listofclasses.map(giveClassFireFrequency));
      print('LowMidHighFireFrequency_PerClass', LowMidHighFireFrequency_PerClass);

/* 5 - VISUALIZE THE RESULTS */

  /** Create a graph of showing the burn frequency for each class **/
  var graphLow = ui.Chart.feature.byFeature(
          LowMidHighFireFrequency_PerClass, 
          'Class', 
          'Fire_Frequency_Low'
          );
  
  print(graphLow.setChartType("ScatterChart")
          .setOptions({
                vAxis: {title: 'Percent of Total Fires (Low)'},
                hAxis: {title: 'Class'}
          })
        );
                          
  var graphMid = ui.Chart.feature.byFeature(
          LowMidHighFireFrequency_PerClass, 
          'Class', 
          'Fire_Frequency_Mid'
          );
  
  print(graphMid.setChartType("ScatterChart")
          .setOptions({
                vAxis: {title: 'Percent of Total Fires (Mid)'},
                hAxis: {title: 'Class'}
          })
        );
                          
  var graphHigh = ui.Chart.feature.byFeature(
          LowMidHighFireFrequency_PerClass, 
          'Class', 
          'Fire_Frequency_High'
          );
  
  print(graphHigh.setChartType("ScatterChart")
          .setOptions({
                vAxis: {title: 'Percent of Total Fires (High)'},
                hAxis: {title: 'Class'}
          })
        );
        
// Export.table.toDrive({
//   collection: LowMidHighFireFrequency_PerClass,
//   description: 'LowMidHighFireFrequency_PerClass',
//   folder: 'BCM2020-2021/Dissertation',
//   fileNamePrefix: 'LowMidHighFireFrequency_PerClass'
// });
